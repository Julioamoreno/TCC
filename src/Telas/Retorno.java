/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import org.json.JSONArray;
import org.json.JSONException;

/**
 *
 * @author Julio
 */
public class Retorno extends javax.swing.JFrame {

    /**
     * Creates new form Retorno
     * @param resposta
     * @param id
     * @throws org.json.JSONException
     */
    public Retorno(JSONArray resposta,int id) throws JSONException {
        initComponents();
        preencherRetorno(resposta, id);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        txtImagens = new java.awt.TextArea();

        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Retorno");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(txtImagens, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(txtImagens, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(586, 425));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTitulo;
    private java.awt.TextArea txtImagens;
    // End of variables declaration//GEN-END:variables


 public void preencherRetorno(JSONArray resposta, int id) throws JSONException{ //funçao para preencher area de texto,
     if (id == 1) { //ver faces
           for (int i = 0; i < resposta.length(); i++) {
            //Escreve numa JtextArea, as imagens que estão na Bucket.
            txtImagens.append(" Nome:  "+resposta.getJSONObject(i).getString("Face")+"\n");
          }
         }
     else if (id ==2){ //Retorna itens que estão armazenados na nuvem.
                 for (int i = 0; i < resposta.length(); i++) {
                //Escreve as imagens que estão na Bucket.
                txtImagens.append("Nome:  " + resposta.getJSONObject(i).getString("Nome") + "  ; Tamanho:" + resposta.getJSONObject(i).getInt("Tamanho") + "\n");
            }
     }
        else if (id ==3){ //Retorna itens que estão armazenados na nuvem.
                 for (int i = 0; i < resposta.length(); i++) {
                //Escreve as imagens que estão na Bucket.
                txtImagens.append("Nome :  " + resposta.getJSONObject(i).getString("Pasta") +  "\n");
            }
     }
 }
 }
